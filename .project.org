#+TITLE: retro.el

* RETRO-001 Dino running game [8/24]
Implement "Dino running game" included in Chrome at ~chrome://dino/~

Reference for constants, code and assets
- https://github.com/chirag64/t-rex-runner-bot/tree/gh-pages/img
- https://github.com/wayou/t-rex-runner/blob/gh-pages/index.js

- [X] Change resolution to the original ~600x150~
- [X] Load sprite from file with multiple plays
      ~(retro--sprite-play sprite "idle")~
  - [X] Fix sprite tests
  - [X] Fix walk demo
  - [X] Fix t-rex demo
- [X] ~retro-sprite-width~
- [X] ~retro-sprite-height~
- [X] Load fonts from file ~(retro--load-font file-path)~
- [X] Plot text on screen with characters provided by a font
      ~(retro--plot-string font "Hello World" X Y)~
- [X] Print current score on screen
- [X] Make random clouds appear and remove them when out of canvas
- [ ] Make random cluster of cactus appear and remove them when out of canvas
- [ ] Rename as ~dino.el~
- [ ] Add collision between cactus and t-rex
- [ ] Make random pterodactyl appear and remove them when out of canvas
- [ ] Add dock animation for t-rex
- [ ] Add collision between pterodactyl and t-rex
- [ ] Make the "speed" of the game a variable and calculate everything accordingly
- [ ] Compute and show score
- [ ] Keep the highest score somewhere
- [ ] Game over
- [ ] Restart game after game over
- [ ] Start with ~offline~ || ~dino~ autoloaded command
- [ ] ~retro-sprite-bb~ (Bounding Box)
- [ ] ~retro-sprite-aabb~ (Axis Oriented Bounding Box)
- [ ] Extract ~tweening~ functions to ~retro-tween.el~ library
- [ ] Release as ~dino.el~

* RETRO-002 Release 0.0.1 [0/6]
Release ~retro.el~ version 0.0.1

- [ ] README.org
  - [ ] List of references to other attempts and solutions to graphics in Emacs.
  - [ ] Explain what's the purpose of the library
  - [ ] Explain what's the strategy to solve previous attempt's problems
  - [ ] https://dev.to/github/how-to-create-the-perfect-readme-for-your-open-source-project-1k69
- [ ] Benchmarks of different scenarios to evaluate possible performance improvement strategies
- [ ] Add ~retro-game~ macro
- [ ] Documentation, at least for everything used in demos and ~dino.el~
- [ ] Experiment performance impact of using ~defclass~ and ~defmethod~
- [ ] Explore how to implement state machines in common lisp

* Refile [2/39]
Tasks to be refiled somewhere else in this project

- [X] DEMO: Captain America walking in every direction
- [ ] Resize pixel-grid
  - [ ] ~(retro--vector-resize width height vector width-scale height-scale) -> (vector . (width . height))~
  - [ ] ~(retro--vector-resize-to-scale width height vector scale) -> (vector . (width . height))~
  - [ ] ~(retro--vector-resize-to-dimension from-width from-height vector to-width to-height) -> vector~
- [ ] Rename things based on the definition of main concepts
  - Buffer (Emacs)
  - Canvas
  - Viewport
  - PixelGrid
  - Tile
  - Background
  - Sprite
    - Play
    - Frame
  - Font
    - Glyph
- [ ] Create viewport on a canvas or another viewport: a canvas is a viewport,
  when plot something to a viewport if outside of it then plot nothing even if
  inside the original canvas. This feature will enable us to have different part
  of the screen dedicated to display different stuff (scoreboard, dashboard,
  inventory, ...). First use case is the debug viewport to display the name of
  the game, the frame number, current frame per seconds, ...
- [ ] DEMO: Pink walk, jump, throw
- [ ] GAME: Pong
- [ ] disable buffer selection in ~*retro*~ buffers
- [ ] disable cursor  ~(internal-show-cursor WINDOW SHOW)~
- [ ] FIX: arrow keys still move point
- [ ] Implement ~tween-cons~
- [ ] how to check if a file/function is byte compiled
- [ ] how to check if a file/function is natively compiled
- [ ] ~assert~ that it's only checked if it's not byte compiled aka optimized? Or if debugging is turned on
  - [ ] when are macros really expanded?
- [ ] add bounding box to sprite and tiles
- [ ] functions to compose one or more tiles
- [ ] test with calibrate.sprite and clipping with buttercup?
- [ ] learn about game engines (dragonfly book)
- [ ] something for gravity, velocity and damping + ground
  - https://dthompson.us/projects/chickadee.html
  - https://dthompson.us/manuals/chickadee/Rectangles.html
  - https://dthompson.us/manuals/chickadee/Tweening.html
- [ ] collision detection between elements
- [ ] track and display the fps somewhere
- [ ] duff device to plot in buffer to reduce the number of while iterations,
  define macro ~(unrolled-times N (V M) BODY)~ with throw/catch (only after
  having benchmarks, keep this only if it will bring better performance)
- [ ] blog posts on the optimization journey for ~retro.el~
- [ ] ~(retro--sprite-flip-v sprite)~
- [ ] ~(retro--tile-flip-v)~
- [ ] flip-v
- [X] garbage collection trick?
- [ ] extract example and ask for possible improvements on emacs-devel ml
- [ ] add hook on window resize -> font dimension resize
- [ ] special mode buffer? create a major mode for retro mode?
- [ ] major mode for sprite files with instant preview (side by side buffer)
- [ ] utility to import an image file into a sprite file in ~Rust~ or ~C~
- [ ] Have a way to use ~retro.el~ to create an "image" in part of the buffer.
  Can be helpful to show graphical things without using or producing images or
  better for animated graphics because images in this case is not an option.
- [ ] [[https://www.reddit.com/r/gamedev/comments/qsxmb/the_best_jump_algorithm_for_2d_scrolling_games][jump code]] and [[https://gamedev.stackexchange.com/questions/60008/smooth-jumping-in-2d-platformers][here]]
- [ ] GAME: snake ([[https://opengameart.org/content/snake-game-assets][assets]])
- [ ] GAME: flappy bird
- [ ] GAME: pico-8 emulator || similar platform
- [ ] GAME: space invaders original ROM
- [ ] GAME: game boy emulator?
- [ ] GAME: [[https://processing.org][processing]] clone?
- [ ] GAME: wonderboy ([[https://github.com/kimidomaru/Wonder-Boy-Unity-5][assets]])

* Unrelated
Tasks unrelated to this project

- [ ] Something to do
